#include "DesignXML.h"
#include <QString>
#include <QFile>

#define DESIGN_XML_ELEMENT "Design"
#define DESIGN_PART_XML_ATTRIBUTE "part"
#define DESIGN_BOARD_XML_ATTRIBUTE "board"
#define DESIGN_PROJECT_NAME_XML_ATTRIBUTE "projectname"
#define DESIGN_NAME_XML_ATTRIBUTE "name"
#define DESIGN_USER_IP_DIR_XML_ATTRIBUTE "useripdir"
#define DESIGN_BLOCK_DESIGN_TCL_XML_ATTRIBUTE "blockdesigntcl"
#define STATIC_FILE_XML_ELEMENT "StaticFile"
#define STATIC_FILE_DIR_XML_ATTRIBUTE "dir"
#define STATIC_FILE_NAME_XML_ATTRIBUTE "name"
#define STATIC_FILE_TOP_XML_ATTRIBUTE "top"
#define CONSTRAINT_FILE_XML_ELEMENT "ConstraintFile"
#define CONSTRAINT_FILE_DIR_XML_ATTRIBUTE "dir"
#define CONSTRAINT_FILE_NAME_XML_ATTRIBUTE "name"
#define PARTITION_XML_ELEMENT "ReconfigPartition"
#define PARTITION_ID_XML_ATTRIBUTE "id"
#define PARTITION_NAME_XML_ATTRIBUTE "name"
#define PARTITION_SRC_DIR_XML_ATTRIBUTE "srcdir"
#define PARTITION_INSTANCE_NAME_XML_ATTRIBUTE "instancename"
#define PARTITION_RESET_AFTER_RECONFIG_XML_ATTRIBUTE "resetafterreconfig"
#define PARTITION_SNAPPING_MODE_XML_ATTRIBUTE "snappingmode"
#define PARTITION_HW_RESOURCE_XML_ELEMENT "HWResource"
#define MODULE_XML_ELEMENT "ReconfigModule"
#define MODULE_ID_XML_ATTRIBUTE "id"
#define MODULE_NAME_XML_ATTRIBUTE "name"
#define MODULE_PARTITION_ID_XML_ATTRIBUTE "partitionid"
#define MODULE_FILE_XML_ELEMENT "File"
#define MODULE_FILE_DIR_XML_ATTRIBUTE "dir"
#define MODULE_FILE_NAME_XML_ATTRIBUTE "name"
#define CONFIGURATION_XML_ELEMENT "Configuration"
#define CONFIGURATION_ID_XML_ATTRIBUTE "id"
#define CONFIGURATION_NAME_XML_ATTRIBUTE "name"
#define CONFIGURATION_MODULE_XML_ELEMENT "ModuleToImplement"


using std::string;
using std::vector;

bool DesignXML::saveDesign(string outputFile, Design &des) {
    bool result = false;
    QFile file(QString::fromStdString(outputFile));

    if (file.open(QIODevice::WriteOnly | QIODevice::Truncate | QIODevice::Text)) {
        QXmlStreamWriter xmlWriter(&file);
        QXmlStreamAttributes designAttrs;

        xmlWriter.setAutoFormatting(true);
        xmlWriter.writeStartDocument();
        xmlWriter.writeComment("File generated by dynDeT - Design");

        //Start design
        xmlWriter.writeStartElement(DESIGN_XML_ELEMENT);

        //Board and Vivado project data (design attributes)
        designAttrs.append(DESIGN_PART_XML_ATTRIBUTE, QString::fromStdString(des.getPart()));
        designAttrs.append(DESIGN_BOARD_XML_ATTRIBUTE, QString::fromStdString(des.getBoard()));
        designAttrs.append(DESIGN_PROJECT_NAME_XML_ATTRIBUTE, QString::fromStdString(des.getProjectName()));
        designAttrs.append(DESIGN_NAME_XML_ATTRIBUTE, QString::fromStdString(des.getDesignName()));
        designAttrs.append(DESIGN_USER_IP_DIR_XML_ATTRIBUTE, QString::fromStdString(des.getIPDir()));
        designAttrs.append(DESIGN_BLOCK_DESIGN_TCL_XML_ATTRIBUTE, QString::fromStdString(des.getBlockDesignTCL()));
        xmlWriter.writeAttributes(designAttrs);

        //Static files
        addStaticFilesToXMLWriter(xmlWriter, des);

        //Constraint files
        addConstraintFilesToXMLWriter(xmlWriter, des);

        //Partitions
        addPartitionsToXMLWriter(xmlWriter, des);

        //Modules
        addModulesToXMLWriter(xmlWriter, des);

        //Configurations
        addConfigurationsToXMLWriter(xmlWriter, des);

        //End design and document
        xmlWriter.writeEndElement();
        xmlWriter.writeEndDocument();

        if (!xmlWriter.hasError()) {
            result = true;
        }

        file.close();
    }

    return result;
}

void DesignXML::addStaticFilesToXMLWriter(QXmlStreamWriter &xmlWriter, Design &des) {
    vector<vector<string> > staticFiles;

    staticFiles = des.getStaticFiles();

    for (size_t i = 0; i < staticFiles.size(); i++) {
        QXmlStreamAttributes staticFileAttrs;

        staticFileAttrs.append(STATIC_FILE_DIR_XML_ATTRIBUTE, QString::fromStdString(staticFiles[i][0]));
        staticFileAttrs.append(STATIC_FILE_NAME_XML_ATTRIBUTE, QString::fromStdString(staticFiles[i][1]));
        if (i == 0) {
            staticFileAttrs.append(STATIC_FILE_TOP_XML_ATTRIBUTE, "true");
        }
        else {
            staticFileAttrs.append(STATIC_FILE_TOP_XML_ATTRIBUTE, "false");
        }

        xmlWriter.writeStartElement(STATIC_FILE_XML_ELEMENT);
        xmlWriter.writeAttributes(staticFileAttrs);
        xmlWriter.writeEndElement();
    }
}

void DesignXML::addConstraintFilesToXMLWriter(QXmlStreamWriter &xmlWriter, Design &des) {
    vector<vector<string> > constraintFiles;

    constraintFiles = des.getConstraintFiles();

    for (size_t i = 0; i < constraintFiles.size(); i++) {
        QXmlStreamAttributes constraintFileAttrs;

        constraintFileAttrs.append(CONSTRAINT_FILE_DIR_XML_ATTRIBUTE, QString::fromStdString(constraintFiles[i][0]));
        constraintFileAttrs.append(CONSTRAINT_FILE_NAME_XML_ATTRIBUTE, QString::fromStdString(constraintFiles[i][1]));

        xmlWriter.writeStartElement(CONSTRAINT_FILE_XML_ELEMENT);
        xmlWriter.writeAttributes(constraintFileAttrs);
        xmlWriter.writeEndElement();
    }
}

void DesignXML::addPartitionsToXMLWriter(QXmlStreamWriter &xmlWriter, Design &des) {
    vector<ReconfigPartition> partitions;

    partitions = des.getPartitions();

    for (size_t i = 0; i < partitions.size(); i++) {
        vector<string> hwRes = partitions[i].getHwResources();
        QXmlStreamAttributes partitionAttrs;

        partitionAttrs.append(PARTITION_ID_XML_ATTRIBUTE, QString::fromStdString(partitions[i].getPartitionID()));
        partitionAttrs.append(PARTITION_NAME_XML_ATTRIBUTE, QString::fromStdString(partitions[i].getName()));
        partitionAttrs.append(PARTITION_SRC_DIR_XML_ATTRIBUTE, QString::fromStdString(partitions[i].getSrcDir()));
        partitionAttrs.append(PARTITION_INSTANCE_NAME_XML_ATTRIBUTE, QString::fromStdString(partitions[i].getInstanceName()));
        partitionAttrs.append(PARTITION_RESET_AFTER_RECONFIG_XML_ATTRIBUTE, partitions[i].getResetAfterReconfig() ? "true" : "false");
        partitionAttrs.append(PARTITION_SNAPPING_MODE_XML_ATTRIBUTE, partitions[i].getSnappingMode() ? "true" : "false");

        xmlWriter.writeStartElement(PARTITION_XML_ELEMENT);
        xmlWriter.writeAttributes(partitionAttrs);
        //Add hw resources
        for (size_t j = 0; j < hwRes.size(); j++) {
            if (!hwRes[j].empty()) {
                xmlWriter.writeTextElement(PARTITION_HW_RESOURCE_XML_ELEMENT, QString::fromStdString(hwRes[j]));
            }
        }
        xmlWriter.writeEndElement();
    }
}

void DesignXML::addModulesToXMLWriter(QXmlStreamWriter &xmlWriter, Design &des) {
    vector<ReconfigModule> modules;

    modules = des.getModules();

    for (size_t i = 0; i < modules.size(); i++) {
        vector<vector<string> > files = modules[i].getFiles();
        QXmlStreamAttributes moduleAttrs;

        moduleAttrs.append(MODULE_ID_XML_ATTRIBUTE, QString::fromStdString(modules[i].getModuleID()));
        moduleAttrs.append(MODULE_NAME_XML_ATTRIBUTE, QString::fromStdString(modules[i].getName()));
        moduleAttrs.append(MODULE_PARTITION_ID_XML_ATTRIBUTE, QString::fromStdString(modules[i].getPartitionID()));

        xmlWriter.writeStartElement(MODULE_XML_ELEMENT);
        xmlWriter.writeAttributes(moduleAttrs);
        for (size_t j = 0; j < files.size(); j++) {
            QXmlStreamAttributes fileAttrs;

            fileAttrs.append(MODULE_FILE_DIR_XML_ATTRIBUTE, QString::fromStdString(files[j][0]));
            fileAttrs.append(MODULE_FILE_NAME_XML_ATTRIBUTE, QString::fromStdString(files[j][1]));

            xmlWriter.writeStartElement(MODULE_FILE_XML_ELEMENT);
            xmlWriter.writeAttributes(fileAttrs);
            xmlWriter.writeEndElement();
        }
        xmlWriter.writeEndElement();
    }
}

void DesignXML::addConfigurationsToXMLWriter(QXmlStreamWriter &xmlWriter, Design &des) {
    vector<Configuration> configs;

    configs = des.getConfigurations();

    for (size_t i = 0; i < configs.size(); i++) {
        vector<string> modulesIDs = configs[i].getModulesIDs();
        QXmlStreamAttributes configAttrs;

        configAttrs.append(CONFIGURATION_ID_XML_ATTRIBUTE, QString::fromStdString(configs[i].getConfigID()));
        configAttrs.append(CONFIGURATION_NAME_XML_ATTRIBUTE, QString::fromStdString(configs[i].getName()));

        xmlWriter.writeStartElement(CONFIGURATION_XML_ELEMENT);
        xmlWriter.writeAttributes(configAttrs);
        for (size_t j = 0; j < modulesIDs.size(); j++) {
            xmlWriter.writeTextElement(CONFIGURATION_MODULE_XML_ELEMENT, QString::fromStdString(modulesIDs[j]));
        }
        xmlWriter.writeEndElement();
    }
}

bool DesignXML::readDesign(string inputFile, Design &des) {
    bool result = false;
    QFile file(QString::fromStdString(inputFile));

    if (file.open(QIODevice::ReadOnly | QIODevice::Text)) {
        QXmlStreamReader xmlReader(&file);
        QXmlStreamAttributes xmlAttrs;

        while (!xmlReader.atEnd() && !xmlReader.hasError()) {
            if (xmlReader.isStartElement()) {
                //Design element
                if (xmlReader.name() == DESIGN_XML_ELEMENT) {
                    xmlAttrs = xmlReader.attributes();
                    readDesignAttributes(xmlAttrs, des);
                }

                //Static file
                if (xmlReader.name() == STATIC_FILE_XML_ELEMENT) {
                    xmlAttrs = xmlReader.attributes();
                    readStaticFileAttributes(xmlAttrs, des);
                }

                //Constraint file
                if (xmlReader.name() == CONSTRAINT_FILE_XML_ELEMENT) {
                    xmlAttrs = xmlReader.attributes();
                    readConstraintFileAttributes(xmlAttrs, des);
                }

                //Reconfigurable partition
                if (xmlReader.name() == PARTITION_XML_ELEMENT) {
                    readPartition(xmlReader, des);
                }

                //Reconfigurable module
                if (xmlReader.name() == MODULE_XML_ELEMENT) {
                    readModule(xmlReader, des);
                }

                //Configuration
                if (xmlReader.name() == CONFIGURATION_XML_ELEMENT) {
                    readConfiguration(xmlReader, des);
                }
            }

            xmlReader.readNext();
        }


        if (!xmlReader.hasError()) {
            result = true;
        }

        file.close();
        xmlReader.clear();
    }

    return result;
}

void DesignXML::readDesignAttributes(QXmlStreamAttributes &designAttrs, Design &des) {
    QString part, board, projectName, designName, userIPDir, blockDesignTCL;

    //Obtain data
    part = designAttrs.value(DESIGN_PART_XML_ATTRIBUTE).toString();
    board = designAttrs.value(DESIGN_BOARD_XML_ATTRIBUTE).toString();
    projectName = designAttrs.value(DESIGN_PROJECT_NAME_XML_ATTRIBUTE).toString();
    designName = designAttrs.value(DESIGN_NAME_XML_ATTRIBUTE).toString();
    userIPDir = designAttrs.value(DESIGN_USER_IP_DIR_XML_ATTRIBUTE).toString();
    blockDesignTCL = designAttrs.value(DESIGN_BLOCK_DESIGN_TCL_XML_ATTRIBUTE).toString();

    //Set the design object
    des.setPart(part.toStdString());
    des.setBoard(board.toStdString());
    des.setProjectName(projectName.toStdString());
    des.setDesignName(designName.toStdString());
    des.setIPDir(userIPDir.toStdString());
    des.setBlockDesignTCL(blockDesignTCL.toStdString());
}

void DesignXML::readStaticFileAttributes(QXmlStreamAttributes &staticFileAttrs, Design &des) {
    QString dir, name;

    //Obtain data
    dir = staticFileAttrs.value(STATIC_FILE_DIR_XML_ATTRIBUTE).toString();
    name = staticFileAttrs.value(STATIC_FILE_NAME_XML_ATTRIBUTE).toString();

    //Set the design object
    des.addStaticFile(dir.toStdString(), name.toStdString());
}

void DesignXML::readConstraintFileAttributes(QXmlStreamAttributes &constraintFileAttrs, Design &des) {
    QString dir, name;

    //Obtain data
    dir = constraintFileAttrs.value(CONSTRAINT_FILE_DIR_XML_ATTRIBUTE).toString();
    name = constraintFileAttrs.value(CONSTRAINT_FILE_NAME_XML_ATTRIBUTE).toString();

    //Set the design object
    des.addConstraintFile(dir.toStdString(), name.toStdString());
}

void DesignXML::readPartition(QXmlStreamReader &xmlReader, Design &des) {
    QXmlStreamAttributes partitionAttrs;
    QString id, name, srcDir, instanceName;
    bool resetAfterReconfig, snappingMode;

    partitionAttrs = xmlReader.attributes();

    //Obtain data
    id = partitionAttrs.value(PARTITION_ID_XML_ATTRIBUTE).toString();
    name = partitionAttrs.value(PARTITION_NAME_XML_ATTRIBUTE).toString();
    srcDir = partitionAttrs.value(PARTITION_SRC_DIR_XML_ATTRIBUTE).toString();
    instanceName = partitionAttrs.value(PARTITION_INSTANCE_NAME_XML_ATTRIBUTE).toString();
    resetAfterReconfig = partitionAttrs.value(PARTITION_RESET_AFTER_RECONFIG_XML_ATTRIBUTE).toString() == "true" ? true : false;
    snappingMode = partitionAttrs.value(PARTITION_SNAPPING_MODE_XML_ATTRIBUTE).toString() == "true" ? true : false;

    //Create the partition
    ReconfigPartition partition(id.toStdString(), name.toStdString(), instanceName.toStdString(), srcDir.toStdString(), resetAfterReconfig, snappingMode);
    //Read HW resources
    while (!(xmlReader.isEndElement() && xmlReader.name() == PARTITION_XML_ELEMENT)) {
        if (xmlReader.isStartElement() && xmlReader.name() == PARTITION_HW_RESOURCE_XML_ELEMENT) {
            partition.addHwResource(xmlReader.readElementText().toStdString());
        }
        xmlReader.readNext();
    }

    //Add partition to design
    des.addPartition(partition);
}

void DesignXML::readModule(QXmlStreamReader &xmlReader, Design &des) {
    QXmlStreamAttributes moduleAttrs, fileAttrs;
    QString id, name, partitionID, fileDir, fileName;

    moduleAttrs = xmlReader.attributes();

    //Obtain data
    id = moduleAttrs.value(MODULE_ID_XML_ATTRIBUTE).toString();
    name = moduleAttrs.value(MODULE_NAME_XML_ATTRIBUTE).toString();
    partitionID = moduleAttrs.value(MODULE_PARTITION_ID_XML_ATTRIBUTE).toString();

    //Create the module
    ReconfigModule module(id.toStdString(), name.toStdString(), partitionID.toStdString());
    //Read module files
    while (!(xmlReader.isEndElement() && xmlReader.name() == MODULE_XML_ELEMENT)) {
        if (xmlReader.isStartElement() && xmlReader.name() == MODULE_FILE_XML_ELEMENT) {
            fileAttrs = xmlReader.attributes();

            fileDir = fileAttrs.value(MODULE_FILE_DIR_XML_ATTRIBUTE).toString();
            fileName = fileAttrs.value(MODULE_FILE_NAME_XML_ATTRIBUTE).toString();

            module.addFile(fileDir.toStdString(), fileName.toStdString());
        }
        xmlReader.readNext();
    }

    //Add module to design
    des.addModule(module);
}

void DesignXML::readConfiguration(QXmlStreamReader &xmlReader, Design &des) {
    QXmlStreamAttributes configurationAttrs;
    QString id, name;

    configurationAttrs = xmlReader.attributes();

    //Obtain data
    id = configurationAttrs.value(CONFIGURATION_ID_XML_ATTRIBUTE).toString();
    name = configurationAttrs.value(CONFIGURATION_NAME_XML_ATTRIBUTE).toString();

    //Create the configuration
    Configuration config(id.toStdString(), name.toStdString());
    //Read implemented modules
    while (!(xmlReader.isEndElement() && xmlReader.name() == CONFIGURATION_XML_ELEMENT)) {
        if (xmlReader.isStartElement() && xmlReader.name() == CONFIGURATION_MODULE_XML_ELEMENT) {
            config.addModule(xmlReader.readElementText().toStdString());
        }
        xmlReader.readNext();
    }

    //Add configuration to design
    des.addConfiguration(config);
}
